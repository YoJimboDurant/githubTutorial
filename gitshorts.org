* YoJimbo's Git Cheat Sheet

* Git Bash Commands:
|Command | Function|
------------------
|git init <project> |get working directory to initialize| 
|git add . |add all files into staging|
|git commit -m "message" |commit (take snapshot of current project)| 
|git status |status of files|
|git status -s | shorthand status
|git log |commit history|
|git log --oneline | all commits with short message|
|git diff |view differences|
|git diff --cached |differences in staging|


* Notes on Using git with Emacs

- Emacs loves to create backup files. For this, we need to create a
  .gitignore_global file in home directory, then edit it to include:
#+
# Ignore Emacs backups

*.~*~ 

#+

save, close, then add it to .gitconfig

  with:

git config --global core.excludesfile ~/.gitignore_global

 
* GitHub Notes
 *Make sure site is secure - look for https is secure connection* 
- Create opensource account (will be free but everyone will be able to
look at and download data/code)
- Use professional sounding name
- Strong password
- You can setup a SSH key to get computer trusted
- Organizations can be used to set up teams (if multiple people are
  working on the same thing)
- Pull requests show if people have cloned or forked - and are
  requested a merge.
- Wiki has information about the project
- Graphs/issues/etc
- Deploy Key is SSH key stored on server that allows server to have
  access to repository.
** Social aspect of gitHub 
- can follow friends and /vice-a-versa/
- watch projects

** upload to GitHub
1. create SSH Key (public/private)
   - Start -> UserName (got to personal folder)
   - look for .ssh folder - *backup if there!*
   - open gitbash
   - ssh-keygen -t rsa -C "emailaddress" (hit enter twice)
   - Create key phrase
   - in .ssh open id_rsa.pub, open with text editor (Windows thinks
   this is a MS Publishing file so lookout!),  and copy/paste code to GitHub
   - Have ssh key in gitHub and private key on PC.
   - To test this type: ssh -T git@github.com. Confirm, and enter
   your password for your ssh you created.

2. create connection and push

- git remote add origin (get ssh from github repository)
- git push origin master  <- pushed master branch to origin (github)


* Basic Branching
use the -b switch to create and checkout branch:

$ git checkout -b iss53
Switched to a new branch "iss53"

to checkout:
$ git checkout iss53

to merge:
$ git checkout master
$ git merge hotfix

* Useful websites

** Youtube videos
*** 308tube tutorial
- http://www.youtube.com/watch?v=mYjZtU1-u9Y
- http://www.youtube.com/watch?v=8r_IErxmoUc
- http://www.youtube.com/watch?v=STJBFXskfCc










